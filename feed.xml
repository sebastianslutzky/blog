<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
  <generator uri="http://jekyllrb.com" version="3.4.3">Jekyll</generator>
  
  
  <link href="http://youarewhatyoucode/feed.xml" rel="self" type="application/atom+xml" />
  <link href="http://youarewhatyoucode/" rel="alternate" type="text/html" hreflang="en" />
  <updated>2017-03-31T23:50:37+00:00</updated>
  <id>http://youarewhatyoucode//</id>

  
    <title type="html">you are what you code</title>
  

  
    <subtitle>a pretentiusly simple blog, with a series of coherent tech rambles...</subtitle>
  

  
    <author>
        <name>sebastian slutzky</name>
      
      
    </author>
  

  
  
    <entry>
      
      <title type="html">Delete Stale Git Branches With Powershell</title>
      
      <link href="http://youarewhatyoucode/2017/03/31/delete-stale-git-branches-with-powershell/" rel="alternate" type="text/html" title="Delete Stale Git Branches With Powershell" />
      <published>2017-03-31T00:00:00+00:00</published>
      <updated>2017-03-31T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2017/03/31/delete-stale-git-branches-with-powershell</id>
      <content type="html" xml:base="http://youarewhatyoucode/2017/03/31/delete-stale-git-branches-with-powershell/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With the increasing adoption of source code management workflows such as &lt;a href=&quot;http://nvie.com/posts/a-successful-git-branching-model/&quot;&gt;Git Flow&lt;/a&gt;,
it is common to keep &quot;stale&quot; branches in local repositories.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;steps_to_reproduce&quot;&gt;Steps to reproduce&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The steps needed to end up in this situation are more or less like this:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Dev1 creates &amp;amp; publishes the branch Feature1&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git checkout -B Feature1
..make &amp;amp; commit changes..
git push -u origin Feature1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dev2 fetches the branch to collaborate or review&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;git fetch
git checkout Feature1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Dev2 deletes the Feature1 branch after merging it into master&lt;/p&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;# delete the branch on the remote
git push origin --delete Feature1
# delete the branch locally
git branch -D Feature1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;pruning_stale_references&quot;&gt;Pruning stale references&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;At this stage,  Dev1 (and 3, 4 etc) will want to have the deleted branch gone from their workspace too.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A quick search will lead you to the &lt;code&gt;prune&lt;/code&gt; sub command&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$&amp;gt; git remote update origin --prune
Fetching origin
From https://github.com/sebastianslutzky/TestRepo
x [deleted]         (none)     -&amp;gt; origin/Feature1&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;However, this command only removes the reference to the tracking branch, not the local branch itself.
You can see that the orphan branch is still here:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;literalblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre&gt;$&amp;gt; git branch -l
 Feature1
 * master&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;delete_branches_not_in_the_remote&quot;&gt;Delete branches not in the remote&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So here is a simple Powershell script that deletes the orphan local branch:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;powershell&quot;&gt;&lt;table class=&quot;pyhltable&quot;&gt;&lt;tr&gt;&lt;td&gt;&lt;div class=&quot;linenodiv&quot; style=&quot;background-color: #f0f0f0; padding-right: 10px&quot;&gt;1
2
3
4
5
6
7&lt;/div&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;$local&lt;/span&gt;=git branch -l
 &lt;span style=&quot;color: #19177C&quot;&gt;$remote&lt;/span&gt;=git branch -r
 &lt;span style=&quot;color: #19177C&quot;&gt;$local&lt;/span&gt;|
    %{&lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt;.Trim()}|
    ?{&lt;span style=&quot;color: #666666&quot;&gt;-not&lt;/span&gt; (&lt;span style=&quot;color: #19177C&quot;&gt;$remote&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-like&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;*&amp;#39;&lt;/span&gt; + &lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt;) }|
    ?{&lt;span style=&quot;color: #666666&quot;&gt;-not&lt;/span&gt;(&lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-match&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;master&amp;quot;&lt;/span&gt; )}|
    %{git branch -D &lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt;}
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Surely this code could be compressed in one single piped command, but it could turn a bit confusing.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We are getting the list of local and remote branches (lines 1 &amp;amp; 2).
Then we perform a substraction set operation ($local - $remote) (line 5).
This will gives us the set of local branches not in the remote local branches not in the remote.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We finally delete them in line 7.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="git" />
      
        <category term="powershell" />
      

      

      
        <summary type="html">With the increasing adoption of source code management workflows such as Git Flow, it is common to keep &quot;stale&quot; branches in local repositories. Steps to reproduce The steps needed to end up in this situation are more or less like this: Dev1 creates &amp;amp; publishes the branch Feature1 git checkout -B Feature1 ..make &amp;amp; commit changes.. git push -u origin Feature1 Dev2 fetches the branch to collaborate or review git fetch git checkout Feature1 Dev2 deletes the Feature1 branch after merging it into master # delete the branch on the remote git push origin --delete Feature1 # delete the branch locally git branch -D Feature1 Pruning stale references At this stage, Dev1 (and 3, 4 etc) will want to have the deleted branch gone from their workspace too. A quick search will lead you to the prune sub command $&amp;gt; git remote update origin --prune Fetching origin From https://github.com/sebastianslutzky/TestRepo x [deleted] (none) -&amp;gt; origin/Feature1 However, this command only removes the reference to the tracking branch, not the local branch itself. You can see that the orphan branch is still here: $&amp;gt; git branch -l Feature1 * master Delete branches not in the remote So here is a simple Powershell script that deletes the orphan local branch: 1 2 3 4 5 6 7 $local=git branch -l $remote=git branch -r $local| %{$_.Trim()}| ?{-not ($remote -like &amp;#39;*&amp;#39; + $_) }| ?{-not($_ -match &amp;quot;master&amp;quot; )}| %{git branch -D $_} Surely this code could be compressed in one single piped command, but it could turn a bit confusing. We are getting the list of local and remote branches (lines 1 &amp;amp; 2). Then we perform a substraction set operation ($local - $remote) (line 5). This will gives us the set of local branches not in the remote local branches not in the remote. We finally delete them in line 7.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Take control of your Web API aspects</title>
      
      <link href="http://youarewhatyoucode/2015/11/24/take-control-of-your-api-aspects/" rel="alternate" type="text/html" title="Take control of your Web API aspects" />
      <published>2015-11-24T00:00:00+00:00</published>
      <updated>2015-11-24T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2015/11/24/take-control-of-your-api-aspects</id>
      <content type="html" xml:base="http://youarewhatyoucode/2015/11/24/take-control-of-your-api-aspects/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Action filters  are a way of modifying or decorating the execution of one or more action methods. They provide points of execution before and after the action method itself executes.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;admonitionblock warning&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td class=&quot;icon&quot;&gt;
&lt;i class=&quot;fa icon-warning&quot; title=&quot;Warning&quot;&gt;&lt;/i&gt;
&lt;/td&gt;
&lt;td class=&quot;content&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For more details on action filters see &lt;a href=&quot;http://www.asp.net/mvc/overview/older-versions-1/controllers-and-routing/understanding-action-filters-cs&quot;&quot;&gt;this article&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;order_of_execution_salami_slice_russian_doll&quot;&gt;Order of Execution: Salami Slice + Russian Doll&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can have action filters declared at three levels: globally, controller-wide or action-specific. &lt;strong&gt;They will execute in that order&amp;#8230;&amp;#8203;sort of.&lt;/strong&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Once ordered, action filters are executed &lt;strong&gt;sequentially&lt;/strong&gt;, without connection between them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But here&amp;#8217;s the fun bit, the order of execution is reverted when the response is processed. In other words, if when processing the request the order of filters is&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;menuseq&quot;&gt;&lt;span class=&quot;menu&quot;&gt;View&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;FilterA&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;FilterB&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;FilterC&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;menuitem&quot;&gt;Action&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;then when processing the response the order will be&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;span class=&quot;menuseq&quot;&gt;&lt;span class=&quot;menu&quot;&gt;View&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;Action&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;FilterC&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;submenu&quot;&gt;FilterB&lt;/span&gt;&amp;#160;&amp;#9656; &lt;span class=&quot;menuitem&quot;&gt;Filter&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;there are some design patterns like:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Chain-of-responsibility_pattern&quot;&gt;Chain of Responsibility&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;https://en.wikipedia.org/wiki/Command_pattern&quot;&gt;Commands&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;I prefer to use the more visual &lt;a href=&quot;http://blogs.msdn.com/b/skaufman/archive/2005/04/25/411809.aspx&quot;&gt;Salami Slice&lt;/a&gt; for the sequential execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&quot;http://blogs.msdn.com/b/skaufman/archive/2005/04/21/410486.aspx&quot;&gt;Russian Doll&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;overriding_a_global_filter_from_an_action_method&quot;&gt;Overriding a global filter from an action method&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This default order is convenient in many cases, but not always. I found myself in the following scenario: I needed to execute a default action filter &lt;strong&gt;unless&lt;/strong&gt; an action was annotated with an overriding action filter attribute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Two examples when this could be useful:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Always log http traffic, except sensitive data: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Log the raw http request and response to all action methods.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But: when the request is for PUT /PaymentCardDetails, then use a custom logger that will not log the payment card number and security code.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;&lt;strong&gt;Always require authentication tokens, except Login and Forgot Password methods: &lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Add a global action filter that will always require authentication token in the request&amp;#8217;s header.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;But: annotate the Login and ForgotPassword action methods with an attribute that will bypass the authentication requirement.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;so_here_is_the_implementation&quot;&gt;&amp;#8230;&amp;#8203;so here is the implementation:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step_1_create_an_interface_for_overriding_attributes&quot;&gt;Step 1: Create an interface for overriding attributes&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Something like this is the simplest thing that can possibly do the job:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;c#&quot;&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//To be implemented by actionfilterattributes that override a global action filter&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;interface&lt;/span&gt; IOverridingFilterAttribute
{
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//The type of actionfilter to be replaced for this request&lt;/span&gt;
    Type OverriddenType { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;get&lt;/span&gt;; }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step_2_create_your_own_actionfilterprovider_with_the_overriding_behaviour&quot;&gt;Step 2: Create your own ActionFilterProvider with the overriding behaviour&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;IFilterProvider is a component you can customise. It defines what action filters to use in this request, and in which order&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;c#&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;OverridingFilterProvider&lt;/span&gt; : IFilterProvider
{
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//called by WebApi on each request, in order&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// to get the list of filters to apply&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; IEnumerable&amp;lt;FilterInfo&amp;gt; GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor)
    {
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; globalFilters = configuration.Filters;
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; controllerFilters = actionDescriptor.ControllerDescriptor.GetFilters().Select(x =&amp;gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; FilterInfo(x,FilterScope.Controller));
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; actionFilters = actionDescriptor.GetFilters().Select(x =&amp;gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; FilterInfo(x,FilterScope.Action));

        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//we&amp;#39;ll apply global,controller-wide&lt;/span&gt;
        &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//and then action attribute filters&lt;/span&gt;
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; all = globalFilters.Concat(controllerFilters).Concat(actionFilters);
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;RemoveAnyOverriddenFilter&lt;/span&gt;(all);
    }

    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//if there are IOverridingFilterAttributes,&lt;/span&gt;
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//remove the filters they override&lt;/span&gt;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; IEnumerable&amp;lt;FilterInfo&amp;gt; RemoveAnyOverriddenFilter(IEnumerable&amp;lt;FilterInfo&amp;gt; all)
    {
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; overridingFilters =
            all.Where(x =&amp;gt; (x.Instance &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;as&lt;/span&gt; IOverridingFilterAttribute) != &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;null&lt;/span&gt;)
                .Select(x =&amp;gt; (IOverridingFilterAttribute) x.Instance);

        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; filtered =  all.Where(x =&amp;gt; !IsOverridden(x, overridingFilters));
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; filtered;
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;bool&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;IsOverridden&lt;/span&gt;(FilterInfo target, IEnumerable&amp;lt;IOverridingFilterAttribute&amp;gt; overrides)
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;foreach&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; overridingFilter &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;in&lt;/span&gt; overrides)
        {
            &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; filterType = target.Instance.GetType();
            &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; overriddenType = overridingFilter.OverriddenType;

            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (overriddenType.IsAssignableFrom(filterType))
                &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;true&lt;/span&gt;;
        }
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;false&lt;/span&gt;;
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; IEnumerable&amp;lt;FilterInfo&amp;gt; OrderFilters(IEnumerable&amp;lt;IFilter&amp;gt; filters, FilterScope scope)
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; filters.Select(instance =&amp;gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; FilterInfo(instance, scope));
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;step_3_register_your_filter_provider&quot;&gt;Step 3: Register your Filter Provider&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;c#&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;WebApiApplication&lt;/span&gt; : HttpApplication
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Application_Start&lt;/span&gt;()
    {
        &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; services = GlobalConfiguration.Configuration.Services;
        services.Replace(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;typeof&lt;/span&gt;(IFilterProvider),
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;OverridingFilterProvider&lt;/span&gt;());
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="asp web api" />
      
        <category term="architecture" />
      
        <category term=".net" />
      
        <category term="c#" />
      

      

      
        <summary type="html">Action filters are a way of modifying or decorating the execution of one or more action methods. They provide points of execution before and after the action method itself executes. For more details on action filters see this article Order of Execution: Salami Slice + Russian Doll You can have action filters declared at three levels: globally, controller-wide or action-specific. They will execute in that order&amp;#8230;&amp;#8203;sort of. Once ordered, action filters are executed sequentially, without connection between them. But here&amp;#8217;s the fun bit, the order of execution is reverted when the response is processed. In other words, if when processing the request the order of filters is View&amp;#160;&amp;#9656; FilterA&amp;#160;&amp;#9656; FilterB&amp;#160;&amp;#9656; FilterC&amp;#160;&amp;#9656; Action then when processing the response the order will be View&amp;#160;&amp;#9656; Action&amp;#160;&amp;#9656; FilterC&amp;#160;&amp;#9656; FilterB&amp;#160;&amp;#9656; Filter there are some design patterns like: Chain of Responsibility Commands I prefer to use the more visual Salami Slice for the sequential execution. Russian Doll Overriding a global filter from an action method This default order is convenient in many cases, but not always. I found myself in the following scenario: I needed to execute a default action filter unless an action was annotated with an overriding action filter attribute. Two examples when this could be useful: Always log http traffic, except sensitive data: Log the raw http request and response to all action methods. But: when the request is for PUT /PaymentCardDetails, then use a custom logger that will not log the payment card number and security code. Always require authentication tokens, except Login and Forgot Password methods: Add a global action filter that will always require authentication token in the request&amp;#8217;s header. But: annotate the Login and ForgotPassword action methods with an attribute that will bypass the authentication requirement. &amp;#8230;&amp;#8203;so here is the implementation: Step 1: Create an interface for overriding attributes Something like this is the simplest thing that can possibly do the job: //To be implemented by actionfilterattributes that override a global action filter public interface IOverridingFilterAttribute { //The type of actionfilter to be replaced for this request Type OverriddenType { get; } } Step 2: Create your own ActionFilterProvider with the overriding behaviour IFilterProvider is a component you can customise. It defines what action filters to use in this request, and in which order public class OverridingFilterProvider : IFilterProvider { //called by WebApi on each request, in order // to get the list of filters to apply public IEnumerable&amp;lt;FilterInfo&amp;gt; GetFilters(HttpConfiguration configuration, HttpActionDescriptor actionDescriptor) { var globalFilters = configuration.Filters; var controllerFilters = actionDescriptor.ControllerDescriptor.GetFilters().Select(x =&amp;gt; new FilterInfo(x,FilterScope.Controller)); var actionFilters = actionDescriptor.GetFilters().Select(x =&amp;gt; new FilterInfo(x,FilterScope.Action)); //we&amp;#39;ll apply global,controller-wide //and then action attribute filters var all = globalFilters.Concat(controllerFilters).Concat(actionFilters); return RemoveAnyOverriddenFilter(all); } //if there are IOverridingFilterAttributes, //remove the filters they override private IEnumerable&amp;lt;FilterInfo&amp;gt; RemoveAnyOverriddenFilter(IEnumerable&amp;lt;FilterInfo&amp;gt; all) { var overridingFilters = all.Where(x =&amp;gt; (x.Instance as IOverridingFilterAttribute) != null) .Select(x =&amp;gt; (IOverridingFilterAttribute) x.Instance); var filtered = all.Where(x =&amp;gt; !IsOverridden(x, overridingFilters)); return filtered; } private bool IsOverridden(FilterInfo target, IEnumerable&amp;lt;IOverridingFilterAttribute&amp;gt; overrides) { foreach (var overridingFilter in overrides) { var filterType = target.Instance.GetType(); var overriddenType = overridingFilter.OverriddenType; if (overriddenType.IsAssignableFrom(filterType)) return true; } return false; } private IEnumerable&amp;lt;FilterInfo&amp;gt; OrderFilters(IEnumerable&amp;lt;IFilter&amp;gt; filters, FilterScope scope) { return filters.Select(instance =&amp;gt; new FilterInfo(instance, scope)); } } Step 3: Register your Filter Provider public class WebApiApplication : HttpApplication { protected void Application_Start() { var services = GlobalConfiguration.Configuration.Services; services.Replace(typeof(IFilterProvider), new OverridingFilterProvider()); } }</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Naked Objects Is Opensource</title>
      
      <link href="http://youarewhatyoucode/2011/10/29/naked-objects-is-opensource/" rel="alternate" type="text/html" title="Naked Objects Is Opensource" />
      <published>2011-10-29T00:00:00+00:00</published>
      <updated>2011-10-29T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/10/29/naked-objects-is-opensource</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/10/29/naked-objects-is-opensource/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Naked Objects framework for .Net is now open sourced under Microsoft Public License.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The projects is now hosted at &lt;a href=&quot;http://nakedobjects.codeplex.com/&quot;&gt;Codeplex&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You can download the framework from there or in Visual Studio, from NuGet&lt;/p&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="news" />
      
        <category term="nakedobjects" />
      
        <category term="ddd" />
      

      

      
        <summary type="html">The Naked Objects framework for .Net is now open sourced under Microsoft Public License. The projects is now hosted at Codeplex You can download the framework from there or in Visual Studio, from NuGet</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Apply Operation In Collection With Linq</title>
      
      <link href="http://youarewhatyoucode/2011/08/22/apply-operation-in-collection-with-linq/" rel="alternate" type="text/html" title="Apply Operation In Collection With Linq" />
      <published>2011-08-22T00:00:00+00:00</published>
      <updated>2011-08-22T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/08/22/apply-operation-in-collection-with-linq</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/08/22/apply-operation-in-collection-with-linq/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These days, it is unusual to write an implementation of the Iterator pattern. Most of the modern languages included a library with a set of aggregate objects that follow this pattern as defined in the &lt;a href=&quot;https://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Gang of Four book&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In .Net, these objects are in the System.Collections namespace and they include classes such as Lists, Queues, Dictionaries, and also their specialised strongly typed (Generic) version.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The Gang Of Four defines two types of iterators: External and Internal. The External requires the client to traverse the items (by looping through the items until the end of the iterator). In contrast to this, the internal iterator delegates this process to a Traverse mix-in class that can be extended and customised.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was looking for something similar to the internal iterator in .Net. That is, a generic way of passing an operation to a collection that would apply it to each of its items. None of the LinQ extension methods for collections seemed to do this, so I wrote one:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Extensions&lt;/span&gt;
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; ApplyOperation&amp;lt;T&amp;gt;
                (&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;this&lt;/span&gt; IEnumerable&amp;lt;T&amp;gt; iterator,
                Action&amp;lt;T&amp;gt; action)
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;foreach&lt;/span&gt; (&lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; item &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;in&lt;/span&gt; iterator)
            action(item);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Which can be used as follows:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;IEnumerable&amp;lt;&lt;span style=&quot;color: #B00040&quot;&gt;string&lt;/span&gt;&amp;gt; cities =
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;string&lt;/span&gt;[] { &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Dublin&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Buenos Aires&amp;quot;&lt;/span&gt;, &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Madrid&amp;quot;&lt;/span&gt; };
cities.ApplyOperation(x=&amp;gt;Console.WriteLine(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;City name: &amp;quot;&lt;/span&gt; + x));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;or simply&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;string&lt;/span&gt;[] {
    &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Dublin&amp;quot;&lt;/span&gt;,
    &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Buenos Aires&amp;quot;&lt;/span&gt;,
    &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Madrid&amp;quot;&lt;/span&gt; }
    .ApplyOperation(
        x =&amp;gt; Console.WriteLine(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;City name: &amp;quot;&lt;/span&gt; + x));&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;which prints the following output:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/console.png&quot; alt=&quot;console&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="linQ" />
      
        <category term=".net" />
      
        <category term="c#" />
      

      

      
        <summary type="html">These days, it is unusual to write an implementation of the Iterator pattern. Most of the modern languages included a library with a set of aggregate objects that follow this pattern as defined in the Gang of Four book. In .Net, these objects are in the System.Collections namespace and they include classes such as Lists, Queues, Dictionaries, and also their specialised strongly typed (Generic) version. The Gang Of Four defines two types of iterators: External and Internal. The External requires the client to traverse the items (by looping through the items until the end of the iterator). In contrast to this, the internal iterator delegates this process to a Traverse mix-in class that can be extended and customised. I was looking for something similar to the internal iterator in .Net. That is, a generic way of passing an operation to a collection that would apply it to each of its items. None of the LinQ extension methods for collections seemed to do this, so I wrote one: public static class Extensions { public static void ApplyOperation&amp;lt;T&amp;gt; (this IEnumerable&amp;lt;T&amp;gt; iterator, Action&amp;lt;T&amp;gt; action) { foreach (var item in iterator) action(item); } } Which can be used as follows: IEnumerable&amp;lt;string&amp;gt; cities = new string[] { &amp;quot;Dublin&amp;quot;, &amp;quot;Buenos Aires&amp;quot;, &amp;quot;Madrid&amp;quot; }; cities.ApplyOperation(x=&amp;gt;Console.WriteLine(&amp;quot;City name: &amp;quot; + x)); or simply new string[] { &amp;quot;Dublin&amp;quot;, &amp;quot;Buenos Aires&amp;quot;, &amp;quot;Madrid&amp;quot; } .ApplyOperation( x =&amp;gt; Console.WriteLine(&amp;quot;City name: &amp;quot; + x)); which prints the following output:</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Unit Test &amp;amp; Design By Contract (Part III)</title>
      
      <link href="http://youarewhatyoucode/2011/08/13/unit-test-design-by-contract-part3/" rel="alternate" type="text/html" title="Unit Test &amp; Design By Contract (Part III)" />
      <published>2011-08-13T00:00:00+00:00</published>
      <updated>2011-08-13T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/08/13/unit-test-design-by-contract-part3</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/08/13/unit-test-design-by-contract-part3/">&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/dbc.png&quot; alt=&quot;dbc&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This article is the last of three on &lt;a href=&quot;/2011/08/08/unit-test-design-by-contract-part1/&quot;&gt;Unit Testing and Design By Contract&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing_post_conditions_and_class_invariants&quot;&gt;Testing Post Conditions and Class Invariants&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now we can test the two post conditions of the &lt;code&gt;Add&lt;/code&gt; method:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Count is 0 before adding any items&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// This is a post condition of the constructor&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//and should be tested separately&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_CountHasIncreasedByOne&lt;/span&gt;()
{
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; stack = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; Stack(maximumNumberOfItemsAllowed: &lt;span style=&quot;color: #666666&quot;&gt;10&lt;/span&gt;);
    stack.Add(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;());
    Assert.AreEqual(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;,stack.Count);
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// We use the &amp;#39;Peek&amp;#39; method to access the item on top of the stack.&lt;/span&gt;
&lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;// Pre and Post conditions of this method should be tested separately&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_ItemIsOnTopOfTheStack&lt;/span&gt;()
{
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; stack = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; Stack(maximumNumberOfItemsAllowed: &lt;span style=&quot;color: #666666&quot;&gt;10&lt;/span&gt;);
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; firstItem = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;();
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; secondItem = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;();
    stack.Add(firstItem);
    stack.Add(secondItem);

    Assert.AreSame(secondItem, stack.Peek());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These types of test are probably the most commonly seen. Good Test Driven Development habits include asserting as few times as possible per tests, ideally one assertion only. The point is, as I mentioned earlier, error localization: if you only test one thing at a time, there has to be one test that explicitly exposes a bug.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is still one more post condition to test: that no invariant rule of the class was violated by the &lt;code&gt;Add&lt;/code&gt; method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;checking_class_invariants&quot;&gt;Checking Class Invariants&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As mentioned earlier, Class Invariants are the rules that should always remain true after any method is executed on a class. The &lt;code&gt;Add&lt;/code&gt; method is no exception, so we will have to test that class invariants were enforced when it executed.
We don’t want to repeat ourselves, so we will delegate to a reusable method called &lt;code&gt;CheckInvariants&lt;/code&gt; that throws an exception if an Invariant rule has been broken.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_InvariantsWereEnforced&lt;/span&gt;()
{
    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//Arrange&lt;/span&gt;
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; stack = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; MockRepository().PartialMock&amp;lt;Stack&amp;gt;(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;);
    stack.Expect(x=&amp;gt;x.CheckInvariants());
    stack.Replay();

    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//Act&lt;/span&gt;
    stack.Add(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;());

    &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;//Assert&lt;/span&gt;
    stack.VerifyAllExpectations();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This tests ensures that the method &lt;code&gt;CheckInvariants&lt;/code&gt; has been invoked by the &lt;code&gt;Add&lt;/code&gt; method. This type of tests, which verifies the interaction of methods rather than the resulting state of objects is known as Behavioural Tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The delegation itself is tested by using the &lt;a href=&quot;http://ayende.com/blog/tags/rhino-mocks&quot;&gt;Rhino Mocks&lt;/a&gt; mocking library for .Net. In this case we create a Partial Mock &lt;code&gt;Stack&lt;/code&gt; object. It is partial because we only want to mock one method (&lt;code&gt;CheckInvariants&lt;/code&gt;) but we do want to execute a different one (&lt;code&gt;Add&lt;/code&gt;) of the same class. We tell the partially mocked &lt;code&gt;Stack&lt;/code&gt; that we are expecting the &lt;code&gt;CheckInvariants&lt;/code&gt; method to be called later. After we explicitly invoked &lt;code&gt;Add&lt;/code&gt;, we tell the stack to verify our expectation.
This verification will fail if the method was not invoked indirectly by &lt;code&gt;Add&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;how_public_are_the_class_invariants&quot;&gt;How public are the Class Invariants?&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So the last thing is to test the Class Invariants. This is just another method called void &lt;code&gt;CheckInvariants()&lt;/code&gt; of the class, but its access level deserves a bit of thought.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s see what options we have:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;private: This method cannot be private because we need to write tests for it (as we did before)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;protected: This would at least let us create the class &lt;code&gt;TestStack&lt;/code&gt; that inherits the &lt;code&gt;Stack&lt;/code&gt; class and create a public method that invokes &lt;code&gt;CheckInvariants&lt;/code&gt;. See &lt;a href=&quot;http://geekswithblogs.net/MattRobertsBlog/archive/2008/12/16/how-to-make-a-quotprotectedquot-method-available-for-quotpartialquot-mocking-and-again.aspx&quot;&gt;this article&lt;/a&gt; for more details on how to mock a protected method&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;internal: Internal methods can be invoked from within the assembly or an external assembly explicitly designated. This is the option chosen in this example&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;public: Not a bad option either in my opinion, any object can invoke this method anytime, which should not cause any inconvenient.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And here are the two test for &lt;code&gt;CheckInvariants&lt;/code&gt; itself&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;[Test,ExpectedException(typeof(InvalidOperationException),&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;    ExpectedMessage=&amp;quot;Count cannnot be negative&amp;quot;)]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;CheckInvariants_PostCond_CountIsNonNegative&lt;/span&gt;()
{
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; stack = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; MockRepository().PartialMock&amp;lt;Stack&amp;gt;(&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;);
    stack.Replay();
    stack.Count = -&lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;;

    stack.CheckInvariants();
}
&lt;span style=&quot;color: #7D9029&quot;&gt;[Test,&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;ExpectedException(typeof(InvalidOperationException),&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;    ExpectedMessage = &amp;quot;Count cannot be greater than 7&amp;quot;)]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;CheckInvariants_PostCond_CountIsLessThanMaximumAllowed&lt;/span&gt;()
{
    &lt;span style=&quot;color: #B00040&quot;&gt;var&lt;/span&gt; stack = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; MockRepository().PartialMock&amp;lt;Stack&amp;gt;(&lt;span style=&quot;color: #666666&quot;&gt;7&lt;/span&gt;);
    stack.Replay();
    stack.Count = &lt;span style=&quot;color: #666666&quot;&gt;8&lt;/span&gt;;

    stack.CheckInvariants();
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;And finally, here is the code for the &lt;code&gt;Stack&lt;/code&gt; class, a class that honors its contract:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;class&lt;/span&gt; &lt;span style=&quot;color: #0000FF; font-weight: bold&quot;&gt;Stack&lt;/span&gt;
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; _maximumNumberOfItemsAllowed;
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Stack&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; maximumNumberOfItemsAllowed)
    {
        _maximumNumberOfItemsAllowed = maximumNumberOfItemsAllowed;
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;int&lt;/span&gt; Count { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;get&lt;/span&gt;; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;set&lt;/span&gt;; }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add&lt;/span&gt;(&lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt; item)
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (item == &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;null&lt;/span&gt;)
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;ArgumentNullException&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;item&amp;quot;&lt;/span&gt;);

        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (_maximumNumberOfItemsAllowed == Count)
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;InvalidOperationException&lt;/span&gt;(
                &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Cannot add items when the stack is full.&amp;quot;&lt;/span&gt;);
        Count++;
        _array.Add(item);

        CheckInvariants();
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;private&lt;/span&gt; IList _array = &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; ArrayList();

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Peek&lt;/span&gt;()
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;return&lt;/span&gt; _array[Count - &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;];
    }

    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;protected&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;internal&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;virtual&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;CheckInvariants&lt;/span&gt;()
    {
        &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (Count &amp;lt; &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;)
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;InvalidOperationException&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Count cannnot be negative&amp;quot;&lt;/span&gt;);

       &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (Count &amp;gt; _maximumNumberOfItemsAllowed)
            &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;InvalidOperationException&lt;/span&gt;(&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;Count cannot be greater than &amp;quot;&lt;/span&gt; + _maximumNumberOfItemsAllowed);
        }
    }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="test-driven development" />
      
        <category term="architecture" />
      
        <category term="c#" />
      
        <category term="unit-testing" />
      

      

      
        <summary type="html">This article is the last of three on Unit Testing and Design By Contract Testing Post Conditions and Class Invariants Now we can test the two post conditions of the Add method: // Count is 0 before adding any items // This is a post condition of the constructor //and should be tested separately [Test] public void Add_PostCond_CountHasIncreasedByOne() { var stack = new Stack(maximumNumberOfItemsAllowed: 10); stack.Add(new object()); Assert.AreEqual(1,stack.Count); } // We use the &amp;#39;Peek&amp;#39; method to access the item on top of the stack. // Pre and Post conditions of this method should be tested separately [Test] public void Add_PostCond_ItemIsOnTopOfTheStack() { var stack = new Stack(maximumNumberOfItemsAllowed: 10); var firstItem = new object(); var secondItem = new object(); stack.Add(firstItem); stack.Add(secondItem); Assert.AreSame(secondItem, stack.Peek()); } These types of test are probably the most commonly seen. Good Test Driven Development habits include asserting as few times as possible per tests, ideally one assertion only. The point is, as I mentioned earlier, error localization: if you only test one thing at a time, there has to be one test that explicitly exposes a bug. There is still one more post condition to test: that no invariant rule of the class was violated by the Add method. Checking Class Invariants As mentioned earlier, Class Invariants are the rules that should always remain true after any method is executed on a class. The Add method is no exception, so we will have to test that class invariants were enforced when it executed. We don’t want to repeat ourselves, so we will delegate to a reusable method called CheckInvariants that throws an exception if an Invariant rule has been broken. [Test] public void Add_PostCond_InvariantsWereEnforced() { //Arrange var stack = new MockRepository().PartialMock&amp;lt;Stack&amp;gt;(1); stack.Expect(x=&amp;gt;x.CheckInvariants()); stack.Replay(); //Act stack.Add(new object()); //Assert stack.VerifyAllExpectations(); } This tests ensures that the method CheckInvariants has been invoked by the Add method. This type of tests, which verifies the interaction of methods rather than the resulting state of objects is known as Behavioural Tests. The delegation itself is tested by using the Rhino Mocks mocking library for .Net. In this case we create a Partial Mock Stack object. It is partial because we only want to mock one method (CheckInvariants) but we do want to execute a different one (Add) of the same class. We tell the partially mocked Stack that we are expecting the CheckInvariants method to be called later. After we explicitly invoked Add, we tell the stack to verify our expectation. This verification will fail if the method was not invoked indirectly by Add. How public are the Class Invariants? So the last thing is to test the Class Invariants. This is just another method called void CheckInvariants() of the class, but its access level deserves a bit of thought. Let’s see what options we have: private: This method cannot be private because we need to write tests for it (as we did before) protected: This would at least let us create the class TestStack that inherits the Stack class and create a public method that invokes CheckInvariants. See this article for more details on how to mock a protected method internal: Internal methods can be invoked from within the assembly or an external assembly explicitly designated. This is the option chosen in this example public: Not a bad option either in my opinion, any object can invoke this method anytime, which should not cause any inconvenient. And here are the two test for CheckInvariants itself [Test,ExpectedException(typeof(InvalidOperationException), ExpectedMessage=&amp;quot;Count cannnot be negative&amp;quot;)] public void CheckInvariants_PostCond_CountIsNonNegative() { var stack = new MockRepository().PartialMock&amp;lt;Stack&amp;gt;(1); stack.Replay(); stack.Count = -1; stack.CheckInvariants(); } [Test, ExpectedException(typeof(InvalidOperationException), ExpectedMessage = &amp;quot;Count cannot be greater than 7&amp;quot;)] public void CheckInvariants_PostCond_CountIsLessThanMaximumAllowed() { var stack = new MockRepository().PartialMock&amp;lt;Stack&amp;gt;(7); stack.Replay(); stack.Count = 8; stack.CheckInvariants(); } And finally, here is the code for the Stack class, a class that honors its contract: public class Stack { private int _maximumNumberOfItemsAllowed; public Stack(int maximumNumberOfItemsAllowed) { _maximumNumberOfItemsAllowed = maximumNumberOfItemsAllowed; } public int Count { get; protected internal set; } public void Add(object item) { if (item == null) throw new ArgumentNullException(&amp;quot;item&amp;quot;); if (_maximumNumberOfItemsAllowed == Count) throw new InvalidOperationException( &amp;quot;Cannot add items when the stack is full.&amp;quot;); Count++; _array.Add(item); CheckInvariants(); } private IList _array = new ArrayList(); public object Peek() { return _array[Count - 1]; } protected internal virtual void CheckInvariants() { if (Count &amp;lt; 0) throw new InvalidOperationException(&amp;quot;Count cannnot be negative&amp;quot;); if (Count &amp;gt; _maximumNumberOfItemsAllowed) throw new InvalidOperationException(&amp;quot;Count cannot be greater than &amp;quot; + _maximumNumberOfItemsAllowed); } }</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Unit Test &amp;amp; Design By Contract (Part II)</title>
      
      <link href="http://youarewhatyoucode/2011/08/12/unit-test-design-by-contract-part2/" rel="alternate" type="text/html" title="Unit Test &amp; Design By Contract (Part II)" />
      <published>2011-08-12T00:00:00+00:00</published>
      <updated>2011-08-12T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/08/12/unit-test-design-by-contract-part2</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/08/12/unit-test-design-by-contract-part2/">&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/dbc.png&quot; alt=&quot;dbc&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;This article is the second of three on &lt;a href=&quot;/2011/08/08/unit-test-design-by-contract-part1/&quot;&gt;Unit Testing and Design By Contract&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;testing_pre_conditions&quot;&gt;Testing Pre-Conditions&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Our User Story contains two pre conditions, so we should write a test for each of them.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;[Test, ExpectedException( typeof(ArgumentNullException))]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_ItemIsRequired&lt;/span&gt;()
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Stack&lt;/span&gt;(maximumNumberOfItemsAllowed: &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;)
        .Add(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;null&lt;/span&gt;);
}

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test,&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;ExpectedException(typeof(InvalidOperationException),&lt;/span&gt;
&lt;span style=&quot;color: #7D9029&quot;&gt;    ExpectedMessage=&amp;quot;Cannot add items when the stack is full.&amp;quot;)]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_StackCantBeFull&lt;/span&gt;()
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Stack&lt;/span&gt;(maximumNumberOfItemsAllowed: &lt;span style=&quot;color: #666666&quot;&gt;0&lt;/span&gt;)
        .Add(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;These unit tests ensure that if any of the two pre conditions are not satisfied, the Supplier will not execute the method. To do so, it throws an error to the Client.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When we unit tests this behaviour, we assert that the Unit Tests will result in an exception being thrown, and we can additionally specify the type of the exception. These types of tests are also known as Unhappy Tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;happy_case_the_n_1_pre_condition&quot;&gt;Happy Case: The N + 1 Pre Condition&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How do you test that all pre conditions are met? Well, you could argue that is not needed, when testing post conditions we can assume that the method is executed, what means that we passed all pre condition checks.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let’s suppose a new pre condition is added to the class, and that the developer forgets to write the Unit Test for it. Yes, all post-condition tests should now fail: there is a new pre condition in town. But this may not happen, what if the new pre condition was coincidentally met by all tests? For example, a new requirement that only allows us to add non empty strings to the stack may not be detected by any existing test if they already use non empty strings only.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is another problem, related to error localization. In his brilliant book “Working Effectively with Legacy Code” Michael Feathers emphasizes that one of the benefits of good tests is that it helps us to easily localize problems. With a happy case, we do not want to test the outcome of a method. We want to check that if all pre requisites are satisfied, the method throws no error. This is the opposite scenario
of an unhappy case, that is, a happy case for pre conditions.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_HappyCase&lt;/span&gt;()
{
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Stack&lt;/span&gt;(maximumNumberOfItemsAllowed: &lt;span style=&quot;color: #666666&quot;&gt;1&lt;/span&gt;)
        .Add(&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; &lt;span style=&quot;color: #B00040&quot;&gt;object&lt;/span&gt;());
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Notice that we are not doing any checking on this test. We simply want to pass all the validations for pre conditions. We are also not interested in testing the state of the stack after adding the item. In other words, we are not testing pre conditions either. We will do that in the nexdt part&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming_next&quot;&gt;Coming Next:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/2011/08/13/unit-test-design-by-contract-part3&quot;&gt;Testing Post Conditions and Class Invariants&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="test-driven development" />
      
        <category term="architecture" />
      
        <category term="c#" />
      
        <category term="unit-testing" />
      

      

      
        <summary type="html">This article is the second of three on Unit Testing and Design By Contract Testing Pre-Conditions Our User Story contains two pre conditions, so we should write a test for each of them. [Test, ExpectedException( typeof(ArgumentNullException))] public void Add_PreCond_ItemIsRequired() { new Stack(maximumNumberOfItemsAllowed: 1) .Add(null); } [Test, ExpectedException(typeof(InvalidOperationException), ExpectedMessage=&amp;quot;Cannot add items when the stack is full.&amp;quot;)] public void Add_PreCond_StackCantBeFull() { new Stack(maximumNumberOfItemsAllowed: 0) .Add(new object()); } These unit tests ensure that if any of the two pre conditions are not satisfied, the Supplier will not execute the method. To do so, it throws an error to the Client. When we unit tests this behaviour, we assert that the Unit Tests will result in an exception being thrown, and we can additionally specify the type of the exception. These types of tests are also known as Unhappy Tests. Happy Case: The N + 1 Pre Condition How do you test that all pre conditions are met? Well, you could argue that is not needed, when testing post conditions we can assume that the method is executed, what means that we passed all pre condition checks. Let’s suppose a new pre condition is added to the class, and that the developer forgets to write the Unit Test for it. Yes, all post-condition tests should now fail: there is a new pre condition in town. But this may not happen, what if the new pre condition was coincidentally met by all tests? For example, a new requirement that only allows us to add non empty strings to the stack may not be detected by any existing test if they already use non empty strings only. There is another problem, related to error localization. In his brilliant book “Working Effectively with Legacy Code” Michael Feathers emphasizes that one of the benefits of good tests is that it helps us to easily localize problems. With a happy case, we do not want to test the outcome of a method. We want to check that if all pre requisites are satisfied, the method throws no error. This is the opposite scenario of an unhappy case, that is, a happy case for pre conditions. [Test] public void Add_PreCond_HappyCase() { new Stack(maximumNumberOfItemsAllowed: 1) .Add(new object()); } Notice that we are not doing any checking on this test. We simply want to pass all the validations for pre conditions. We are also not interested in testing the state of the stack after adding the item. In other words, we are not testing pre conditions either. We will do that in the nexdt part Coming Next: Testing Post Conditions and Class Invariants</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Unit Test &amp;amp; Design By Contract (Part I)</title>
      
      <link href="http://youarewhatyoucode/2011/08/08/unit-test-design-by-contract-part1/" rel="alternate" type="text/html" title="Unit Test &amp; Design By Contract (Part I)" />
      <published>2011-08-08T00:00:00+00:00</published>
      <updated>2011-08-08T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/08/08/unit-test-design-by-contract-part1</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/08/08/unit-test-design-by-contract-part1/">&lt;div class=&quot;imageblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;img src=&quot;/assets/images/dbc.png&quot; alt=&quot;dbc&quot; width=&quot;100%&quot;&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the most useful metaphors for organising software is the one of Design by Contract.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This technique, which was formalised by Bertrand Meyer in 1986 has its roots in previous ideas from Tony Hoare and Barbara Liskov.
In a nutshell, DBC equates the relationship of two pieces of software (i.e. two methods) to that of a &lt;strong&gt;&lt;em&gt;Client&lt;/em&gt;&lt;/strong&gt; and a &lt;strong&gt;&lt;em&gt;Supplier&lt;/em&gt;&lt;/strong&gt; in the business world,
both interacting with each other with clear rights and obligations, specified in a &lt;strong&gt;&lt;em&gt;Contract&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In DBC, a &lt;em&gt;Supplier&lt;/em&gt; can serve a request from a &lt;em&gt;Client&lt;/em&gt; only if the latter satisfy the prerequisites or &lt;strong&gt;&lt;em&gt;preconditions&lt;/em&gt;&lt;/strong&gt; required by the &lt;em&gt;Supplier&lt;/em&gt;.
The &lt;em&gt;Supplier&lt;/em&gt; has an obligation to return a property as expected by the &lt;em&gt;Client&lt;/em&gt;, the &lt;strong&gt;&lt;em&gt;post-condition&lt;/em&gt;&lt;/strong&gt;, once the request is served.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, a contract must specify certain properties that must remain true before and after the nteraction between &lt;em&gt;Client&lt;/em&gt; and &lt;em&gt;Supplier&lt;/em&gt;.
This obligation is known as a &lt;strong&gt;&lt;em&gt;class invariant&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;example&quot;&gt;Example:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A classic example to show DBC in practice is by building a data structure class, such as a Stack class. The rules of adding items to this structure are very clear:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Pre conditions&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;An item must be provided to be added to the stack&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;There must be room in the stack to store the item&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Post conditions&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The number of items in the Stack increased by one&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The item on top of the Stack is the one we just added&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Class Invariants&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The  number of items in the Stack  are greater or equal than zero&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The number of items in the Stack are less or equal to the maximum size allowed&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;who_checks_the_contract&quot;&gt;Who checks the contract?&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Typically, a method checks the pre-conditions of the contract only. If any of the pre conditions were not enforced by the Client of the method, the Supplier will not continue with the execution of the method since its result (and even its execution) can be unexpected. This is usually done by assertions at the beginning of a method: we assert that a precondition is true prior to executing the method, if the assertion is wrong, then the execution is suspended (an exception is thrown).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Post conditions and Class Invariant could, in theory, be checked in code too. However, this would lead to very long, unreadable and inefficient code. Also, in many cases testing the post-conditions is simply not viable. Remember the DBC metaphor and it will be clear that the party who is responsible for an obligation (the Supplier in this case) cannot be in charge of verifying that the obligation has been fulfilled (i.e. that the post condition is true).&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now, the Client could verify Post-Conditions and Class invariants, but we don’t know (and shouldn’t care) who will be the client of the method we are currently building. And if we are creating a Client of a method, our code requires the Supplier to do what is expected when we invoke its method. So where do we test Post conditions and Class invariants? You know the answer, in the Unit Tests.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Each of the six rules defined above can be converted into a unit test. This is what we’ll do next.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;a_structure_for_your_tests&quot;&gt;A structure for your tests&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;But before writing the tests, let me suggest a naming convention for them. I like naming the tests using the following pattern:
%MethodName%&lt;em&gt;%ruleType%&lt;/em&gt;%Description%&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Where rule type is any of the three types of DBC rule: pre condition, post condition or class invariant
Here is the list of test we will write for this User Story, based on the previous pattern&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;csharp&quot;&gt;&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_ItemIsRequired&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_StackCantBeFull&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PreCond_HappyCase&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_CountHasIncreasedByOne&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_ItemIsOnTopOfTheStack&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;Add_PostCond_InvariantsWereEnforced&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;CheckInvariants_PostCond_CountIsNonNegative&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }

&lt;span style=&quot;color: #7D9029&quot;&gt;[Test]&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;void&lt;/span&gt; &lt;span style=&quot;color: #0000FF&quot;&gt;CheckInvariants_PostCond_CountIsLessThanMaximumAllowed&lt;/span&gt;()
    { &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;new&lt;/span&gt; NotImplementedException(); }&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;em&gt;Happy Case&lt;/em&gt; test was not in the list, and there are two tests for a method called &lt;code&gt;Check Invariants&lt;/code&gt;. We will look into these tests in detail later.
Typically you would put these methods in a class called &lt;code&gt;StackTests&lt;/code&gt;. However, if you have a method that requires a large number of tests, you can have one test class per method instead.
Your test class would be named &lt;code&gt;Stack_AddTests&lt;/code&gt; and the test names would be, for example, &lt;code&gt;PreCond_ItemIsRequired&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;generating_documentation_from_your_tests&quot;&gt;Generating Documentation from your Tests&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By following this structure for tests and fixtures, we can enrich the documentation generated from our code.
This requires customisation of tools like &lt;a href=&quot;http://ndoc.sourceforge.net&quot;&gt;NDoc&lt;/a&gt; or &lt;a href=&quot;http://sandcastle.codeplex.com/&quot;&gt;Sandcastle&lt;/a&gt;.
The exact implementation is outside of the scope of this article, but I will post it at some point. The idea is to parse the name of Fixtures and Tests to append pre and post conditions to their relative methods, in a readable way.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One caveat I have with this idea is that you have to remember that you are not using the “true” code for generating the docs, but the names of the apis. This means that your documentation will be as accurate as the name of your tests.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;coming_next&quot;&gt;Coming next:&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;a href=&quot;/2011/08/12/unit-test-design-by-contract-part2&quot;&gt;Checking Pre Conditions&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="test-driven development" />
      
        <category term="architecture" />
      
        <category term="c#" />
      
        <category term="unit-testing" />
      

      

      
        <summary type="html">One of the most useful metaphors for organising software is the one of Design by Contract. This technique, which was formalised by Bertrand Meyer in 1986 has its roots in previous ideas from Tony Hoare and Barbara Liskov. In a nutshell, DBC equates the relationship of two pieces of software (i.e. two methods) to that of a Client and a Supplier in the business world, both interacting with each other with clear rights and obligations, specified in a Contract. In DBC, a Supplier can serve a request from a Client only if the latter satisfy the prerequisites or preconditions required by the Supplier. The Supplier has an obligation to return a property as expected by the Client, the post-condition, once the request is served. Additionally, a contract must specify certain properties that must remain true before and after the nteraction between Client and Supplier. This obligation is known as a class invariant. Example: A classic example to show DBC in practice is by building a data structure class, such as a Stack class. The rules of adding items to this structure are very clear: Pre conditions An item must be provided to be added to the stack There must be room in the stack to store the item Post conditions The number of items in the Stack increased by one The item on top of the Stack is the one we just added Class Invariants The  number of items in the Stack  are greater or equal than zero The number of items in the Stack are less or equal to the maximum size allowed Who checks the contract? Typically, a method checks the pre-conditions of the contract only. If any of the pre conditions were not enforced by the Client of the method, the Supplier will not continue with the execution of the method since its result (and even its execution) can be unexpected. This is usually done by assertions at the beginning of a method: we assert that a precondition is true prior to executing the method, if the assertion is wrong, then the execution is suspended (an exception is thrown). Post conditions and Class Invariant could, in theory, be checked in code too. However, this would lead to very long, unreadable and inefficient code. Also, in many cases testing the post-conditions is simply not viable. Remember the DBC metaphor and it will be clear that the party who is responsible for an obligation (the Supplier in this case) cannot be in charge of verifying that the obligation has been fulfilled (i.e. that the post condition is true). Now, the Client could verify Post-Conditions and Class invariants, but we don’t know (and shouldn’t care) who will be the client of the method we are currently building. And if we are creating a Client of a method, our code requires the Supplier to do what is expected when we invoke its method. So where do we test Post conditions and Class invariants? You know the answer, in the Unit Tests. Each of the six rules defined above can be converted into a unit test. This is what we’ll do next. A structure for your tests But before writing the tests, let me suggest a naming convention for them. I like naming the tests using the following pattern: %MethodName%%ruleType%%Description% Where rule type is any of the three types of DBC rule: pre condition, post condition or class invariant Here is the list of test we will write for this User Story, based on the previous pattern [Test] public void Add_PreCond_ItemIsRequired() { throw new NotImplementedException(); } [Test] public void Add_PreCond_StackCantBeFull() { throw new NotImplementedException(); } [Test] public void Add_PreCond_HappyCase() { throw new NotImplementedException(); } [Test] public void Add_PostCond_CountHasIncreasedByOne() { throw new NotImplementedException(); } [Test] public void Add_PostCond_ItemIsOnTopOfTheStack() { throw new NotImplementedException(); } [Test] public void Add_PostCond_InvariantsWereEnforced() { throw new NotImplementedException(); } [Test] public void CheckInvariants_PostCond_CountIsNonNegative() { throw new NotImplementedException(); } [Test] public void CheckInvariants_PostCond_CountIsLessThanMaximumAllowed() { throw new NotImplementedException(); } The Happy Case test was not in the list, and there are two tests for a method called Check Invariants. We will look into these tests in detail later. Typically you would put these methods in a class called StackTests. However, if you have a method that requires a large number of tests, you can have one test class per method instead. Your test class would be named Stack_AddTests and the test names would be, for example, PreCond_ItemIsRequired. Generating Documentation from your Tests By following this structure for tests and fixtures, we can enrich the documentation generated from our code. This requires customisation of tools like NDoc or Sandcastle. The exact implementation is outside of the scope of this article, but I will post it at some point. The idea is to parse the name of Fixtures and Tests to append pre and post conditions to their relative methods, in a readable way. One caveat I have with this idea is that you have to remember that you are not using the “true” code for generating the docs, but the names of the apis. This means that your documentation will be as accurate as the name of your tests. Coming next: Checking Pre Conditions</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Notes From Qcon London 2012</title>
      
      <link href="http://youarewhatyoucode/2011/03/14/notes-from-qcon-london-2012/" rel="alternate" type="text/html" title="Notes From Qcon London 2012" />
      <published>2011-03-14T00:00:00+00:00</published>
      <updated>2011-03-14T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2011/03/14/notes-from-qcon-london-2012</id>
      <content type="html" xml:base="http://youarewhatyoucode/2011/03/14/notes-from-qcon-london-2012/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;&lt;em&gt;Did you know Facebook is n ordinary single-threaded PHP website? How complex do you think Twitter’s business logic model is? Do you know how Nokia is preparing to scale Ovi once (if) their Microsoft deal is agreed?&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;You may already be familiar with InfoQ, but if you are not, I recommend you to take a look at it at &lt;a href=&quot;http://www.infoq.com&quot;&gt;www.infoq.com&lt;/a&gt;. InfoQ is an online community focused on innovation in enterprise software development. On a daily basis, they deliver high quality articles for IT communities such as .Net, Java, SOA, Ruby and Agile among others._&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;QCon is the annual event organised by InfoQ, where experts in each of these diverse areas provide an update on the latest lessons learned, discoveries and challenges ahead. I am just back from QCon 2011 in London, where I had the opportunity to listen to some of these experiences and to get an idea of what is being done in other companies and countries.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Is not often that you get to talk to the people behind architectures such as Twitter, Facebook, Nokia and Guardian.co.uk among others, so I want to share some of the good stuff of QCon here.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Today I’m starting with an overview of the chats I assisted to on the first of the three days of conference . I can’t guarantee I’ll remember (or I even grasped) all I listened to, but I can at least give you resources and point you to the right documentation. I also plan to write detailed posts on a few topics I found most interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect1&quot;&gt;
&lt;h2 id=&quot;day_1&quot;&gt;Day 1&lt;/h2&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;All presentations were held during three days, and categorised into five areas or tracks per day. Unfortunately there is only one me so I had to select carefully …&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the tracks of Day 1 was &lt;strong&gt;“Enterprise Agile Transformation”&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Being an Agile geek, I had to force myself to diversify, which was as difficult as getting a dog to eat a balanced diet.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;scaling_lean_agile_large_multisite_or_offshore_delivery&quot;&gt;Scaling Lean &amp;amp; Agile: Large, Multisite or Offshore Delivery&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Craig Larman has a vast experience on implementing SCRUM in very large-scale project. With large I mean 500-1500 person, multisite teams with clients such as Xeror &amp;amp; Alcatel-Lucent. From these experiences he shared lessons learned, patterns and anti patterns on how to adopt and maintain Agile projects with multi hundred person teams, both co located and off shore.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Larman is also the author of the books &lt;em&gt;“Thinking &amp;amp; Organizational Tools”&lt;/em&gt; and &lt;em&gt;“Practices for Scaling Lean &amp;amp; Agile Development”&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This was the key note of the day what means that a bit of time is wasted on bad jokes, but it gave us an idea on how we can keep a high level of communication and transparency despite teams being very large or non- co-located.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_invisible_computer_lab&quot;&gt;The Invisible Computer Lab&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I am still not sure why I choose this presentation, but it turned out very interesting. Fraser Speirs is an iPhone developer who is also the head of Computer at a School in Greenok, Scotland . He told us how his school provided all children with iPads as the main learning channel. He also shared with us what where the students, teachers and parents reactions, his view of the overall results of the iPad implementation, and how he foresees the future of technology in the classroom.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;contracts_collaboration_in_agile_offshore_outsourced_development&quot;&gt;Contracts &amp;amp; Collaboration in Agile “Offshore” Outsourced Development&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Again Craig Larman (I told you I struggled to diversify this day!) deep-dive on how to scale Agile, in particular with off shore outsourced teams. There were a few useful tips and tricks on how to deal with offsite teams without losing the high level of transparency required by Agile methodologies. From cultural differences to contract-model choices, this was no high level, abstract Agile talk, but a very hand on and pragmatic one instead, including tips as low levels as what video chat software to use in daily SCRUMs .&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;bringing_developers_and_testers_closer_together_with_visual_studio&quot;&gt;Bringing developers and testers closer together with Visual Studio&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The “Solutions” track, the only one that run over the three days, was the showroom for commercial products and frameworks. In this context, Gile Davies from Microsoft UK presented Test Manager, a new application for collaboration between testers and developers.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have to say I was extremely impressed by this tool, which is an extension of Team Foundation Server. The amount of help it provides to testers and developers during the lifecycle of bugs is what surprised me:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;-Testers can record their UI interaction within Windows and store them (okay this is not all that impressive yet…)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;-They can modularised these UI steps into logical blocks (e.g. “Find a book to buy”, “Add it to the cart with IE 7.0”, ”Cancel order using keyword only”, etc)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;-All test steps gets auto appended to Bug description.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;-Developers can click on the logical block that failed. They can even debug the problem as of the execution performed by the tester (yes!, it saves the entire state of the test that failed, so developers and tester are always talking of the same environment!)&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;-It can even take automatic snapshot of cloud environments (we are talking Windows Azure only, of course)&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;complex_event_processing_dsl_for_high_frequency_trading&quot;&gt;Complex Event Processing: DSL for High Frequency Trading&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Richard Tibbets presented the system his company build, StreamBase. It is an engine for Complex Event Processing Domain Specific Languages, complied into JVM code. The common perception of DSLs is that they are very expressive but that they cannot perform in scenarios where speed is at premium, like front-office trading applications.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Unfortunately, I wasn’t able to dissipate my objections to DSLs. Ironically, despite all the talk about speed I felt this chat so slow it was never ending.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;where_did_my_architecture_go_preserving_software_architecture_in_its_implementation&quot;&gt;Where Did My Architecture Go? Preserving software architecture in its implementation&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Agile systems are evolutionary, which means that the design of the system is not fully detailed up front. Instead, it “emerges” from a series of cycles of iterative development. Now for those who are not used to evolutionary design, this may sound like anarchy or worse, like no design at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Eoin Woods did a very convincing walk through a set of tools that allow system to generate their representation from their implementation. This allows teams to keep their architectural design updated, so that the big picture is always clear as the software evolves. Some of the tools I knew already, but there were a few others that I’d really like to try in my next project. The tools demonstrated included support for .Net, Java and C++ technologies.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;more_may_follow&quot;&gt;More may follow…&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As I mentioned earlier, I will try to follow this post with other two with the presentation I’ve attended to on Day 2 and 3. After that, I will write a detailed post on some of the talks I’ve found most interesting.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="news" />
      

      

      
        <summary type="html">Did you know Facebook is n ordinary single-threaded PHP website? How complex do you think Twitter’s business logic model is? Do you know how Nokia is preparing to scale Ovi once (if) their Microsoft deal is agreed? You may already be familiar with InfoQ, but if you are not, I recommend you to take a look at it at www.infoq.com. InfoQ is an online community focused on innovation in enterprise software development. On a daily basis, they deliver high quality articles for IT communities such as .Net, Java, SOA, Ruby and Agile among others._ QCon is the annual event organised by InfoQ, where experts in each of these diverse areas provide an update on the latest lessons learned, discoveries and challenges ahead. I am just back from QCon 2011 in London, where I had the opportunity to listen to some of these experiences and to get an idea of what is being done in other companies and countries. Is not often that you get to talk to the people behind architectures such as Twitter, Facebook, Nokia and Guardian.co.uk among others, so I want to share some of the good stuff of QCon here. Today I’m starting with an overview of the chats I assisted to on the first of the three days of conference . I can’t guarantee I’ll remember (or I even grasped) all I listened to, but I can at least give you resources and point you to the right documentation. I also plan to write detailed posts on a few topics I found most interesting. Day 1 All presentations were held during three days, and categorised into five areas or tracks per day. Unfortunately there is only one me so I had to select carefully … One of the tracks of Day 1 was “Enterprise Agile Transformation”. Being an Agile geek, I had to force myself to diversify, which was as difficult as getting a dog to eat a balanced diet. Scaling Lean &amp;amp; Agile: Large, Multisite or Offshore Delivery Craig Larman has a vast experience on implementing SCRUM in very large-scale project. With large I mean 500-1500 person, multisite teams with clients such as Xeror &amp;amp; Alcatel-Lucent. From these experiences he shared lessons learned, patterns and anti patterns on how to adopt and maintain Agile projects with multi hundred person teams, both co located and off shore. Larman is also the author of the books “Thinking &amp;amp; Organizational Tools” and “Practices for Scaling Lean &amp;amp; Agile Development” This was the key note of the day what means that a bit of time is wasted on bad jokes, but it gave us an idea on how we can keep a high level of communication and transparency despite teams being very large or non- co-located. The Invisible Computer Lab I am still not sure why I choose this presentation, but it turned out very interesting. Fraser Speirs is an iPhone developer who is also the head of Computer at a School in Greenok, Scotland . He told us how his school provided all children with iPads as the main learning channel. He also shared with us what where the students, teachers and parents reactions, his view of the overall results of the iPad implementation, and how he foresees the future of technology in the classroom. Contracts &amp;amp; Collaboration in Agile “Offshore” Outsourced Development Again Craig Larman (I told you I struggled to diversify this day!) deep-dive on how to scale Agile, in particular with off shore outsourced teams. There were a few useful tips and tricks on how to deal with offsite teams without losing the high level of transparency required by Agile methodologies. From cultural differences to contract-model choices, this was no high level, abstract Agile talk, but a very hand on and pragmatic one instead, including tips as low levels as what video chat software to use in daily SCRUMs . Bringing developers and testers closer together with Visual Studio The “Solutions” track, the only one that run over the three days, was the showroom for commercial products and frameworks. In this context, Gile Davies from Microsoft UK presented Test Manager, a new application for collaboration between testers and developers. I have to say I was extremely impressed by this tool, which is an extension of Team Foundation Server. The amount of help it provides to testers and developers during the lifecycle of bugs is what surprised me: -Testers can record their UI interaction within Windows and store them (okay this is not all that impressive yet…) -They can modularised these UI steps into logical blocks (e.g. “Find a book to buy”, “Add it to the cart with IE 7.0”, ”Cancel order using keyword only”, etc) -All test steps gets auto appended to Bug description. -Developers can click on the logical block that failed. They can even debug the problem as of the execution performed by the tester (yes!, it saves the entire state of the test that failed, so developers and tester are always talking of the same environment!) -It can even take automatic snapshot of cloud environments (we are talking Windows Azure only, of course) Complex Event Processing: DSL for High Frequency Trading Richard Tibbets presented the system his company build, StreamBase. It is an engine for Complex Event Processing Domain Specific Languages, complied into JVM code. The common perception of DSLs is that they are very expressive but that they cannot perform in scenarios where speed is at premium, like front-office trading applications. Unfortunately, I wasn’t able to dissipate my objections to DSLs. Ironically, despite all the talk about speed I felt this chat so slow it was never ending. Where Did My Architecture Go? Preserving software architecture in its implementation Agile systems are evolutionary, which means that the design of the system is not fully detailed up front. Instead, it “emerges” from a series of cycles of iterative development. Now for those who are not used to evolutionary design, this may sound like anarchy or worse, like no design at all. Eoin Woods did a very convincing walk through a set of tools that allow system to generate their representation from their implementation. This allows teams to keep their architectural design updated, so that the big picture is always clear as the software evolves. Some of the tools I knew already, but there were a few others that I’d really like to try in my next project. The tools demonstrated included support for .Net, Java and C++ technologies. More may follow… As I mentioned earlier, I will try to follow this post with other two with the presentation I’ve attended to on Day 2 and 3. After that, I will write a detailed post on some of the talks I’ve found most interesting.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Finding Duplicate Files Recursively</title>
      
      <link href="http://youarewhatyoucode/2010/04/19/finding-duplicate-files-recursively/" rel="alternate" type="text/html" title="Finding Duplicate Files Recursively" />
      <published>2010-04-19T00:00:00+00:00</published>
      <updated>2010-04-19T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2010/04/19/finding-duplicate-files-recursively</id>
      <content type="html" xml:base="http://youarewhatyoucode/2010/04/19/finding-duplicate-files-recursively/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I was cleaning up a folder with files duplicated in subdirectories. Here is a simple Powershell code that identifies duplications recursively.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There might be a shorter form, but I think this is as I short I can get without becoming very cryptic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;powershell&quot;&gt;&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt; FindDuplicates{
 &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Receives a list of ArrayLists&lt;/span&gt;
 &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# iteratively prints the full path of each ArrayList item&lt;/span&gt;
 &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# where the ArrayList contains multiple paths (i.e duplicates)&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;Process&lt;/span&gt;
{
 &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt;.Count &lt;span style=&quot;color: #666666&quot;&gt;-gt&lt;/span&gt; 1)
       {&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;foreach&lt;/span&gt;(&lt;span style=&quot;color: #19177C&quot;&gt;$d&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;in&lt;/span&gt; &lt;span style=&quot;color: #19177C&quot;&gt;$_&lt;/span&gt;){&lt;span style=&quot;color: #19177C&quot;&gt;$d&lt;/span&gt;.FullName}} }
}

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;function&lt;/span&gt; GetFilesInBuckets(&lt;span style=&quot;color: #19177C&quot;&gt;$dir&lt;/span&gt;,&lt;span style=&quot;color: #19177C&quot;&gt;$filter&lt;/span&gt; = &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;*.*&amp;quot;&lt;/span&gt;)
{
 &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Creates a hashtable of arraylists (1 entry per unique file name)&lt;/span&gt;
 &lt;span style=&quot;color: #408080; font-style: italic&quot;&gt;# Returns the list of arraylists only (not the entire hashtable)&lt;/span&gt;
  &lt;span style=&quot;color: #19177C&quot;&gt;$files&lt;/span&gt; = @{}
 &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;foreach&lt;/span&gt; (&lt;span style=&quot;color: #19177C&quot;&gt;$fl&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;in&lt;/span&gt; (gci &lt;span style=&quot;color: #19177C&quot;&gt;$dir&lt;/span&gt; -filter &lt;span style=&quot;color: #19177C&quot;&gt;$filter&lt;/span&gt; -r))
  {
    &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;if&lt;/span&gt;(!&lt;span style=&quot;color: #19177C&quot;&gt;$files&lt;/span&gt;.ContainsKey(&lt;span style=&quot;color: #19177C&quot;&gt;$fl&lt;/span&gt;.Name))
    {
    &lt;span style=&quot;color: #19177C&quot;&gt;$files&lt;/span&gt;[&lt;span style=&quot;color: #19177C&quot;&gt;$fl&lt;/span&gt;.Name] = &lt;span style=&quot;color: #008000&quot;&gt;New-Object&lt;/span&gt; System.Collections.ArrayList
    }
    &lt;span style=&quot;color: #880000&quot;&gt;[void]&lt;/span&gt;&lt;span style=&quot;color: #19177C&quot;&gt;$files&lt;/span&gt;[&lt;span style=&quot;color: #19177C&quot;&gt;$fl&lt;/span&gt;.Name].Add(&lt;span style=&quot;color: #19177C&quot;&gt;$fl&lt;/span&gt;)
  }
 &lt;span style=&quot;color: #19177C&quot;&gt;$files&lt;/span&gt;.Values
}

GetFilesInBuckets &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;C:\MyRootFolder&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-f&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;*.txt&amp;quot;&lt;/span&gt;
    |FindDuplicates&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additional filtering methods will look similar to as &lt;code&gt;FindDuplicates&lt;/code&gt;, and can be piped at the end of the last line of code:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;powershell&quot;&gt;GetFilesInBuckets &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;C:\MyRootFolder&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #666666&quot;&gt;-f&lt;/span&gt; &lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;*.txt&amp;quot;&lt;/span&gt;|
    FindDuplicates|
    FilterOutOlder&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="powershell" />
      

      

      
        <summary type="html">I was cleaning up a folder with files duplicated in subdirectories. Here is a simple Powershell code that identifies duplications recursively. There might be a shorter form, but I think this is as I short I can get without becoming very cryptic. function FindDuplicates{ # Receives a list of ArrayLists # iteratively prints the full path of each ArrayList item # where the ArrayList contains multiple paths (i.e duplicates) Process { if ($_.Count -gt 1) {foreach($d in $_){$d.FullName}} } } function GetFilesInBuckets($dir,$filter = &amp;quot;*.*&amp;quot;) { # Creates a hashtable of arraylists (1 entry per unique file name) # Returns the list of arraylists only (not the entire hashtable) $files = @{} foreach ($fl in (gci $dir -filter $filter -r)) { if(!$files.ContainsKey($fl.Name)) { $files[$fl.Name] = New-Object System.Collections.ArrayList } [void]$files[$fl.Name].Add($fl) } $files.Values } GetFilesInBuckets &amp;quot;C:\MyRootFolder&amp;quot; -f &amp;quot;*.txt&amp;quot; |FindDuplicates Additional filtering methods will look similar to as FindDuplicates, and can be piped at the end of the last line of code: GetFilesInBuckets &amp;quot;C:\MyRootFolder&amp;quot; -f &amp;quot;*.txt&amp;quot;| FindDuplicates| FilterOutOlder</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Nant And Xml Programming</title>
      
      <link href="http://youarewhatyoucode/2010/04/16/nant-and-xml-programming/" rel="alternate" type="text/html" title="Nant And Xml Programming" />
      <published>2010-04-16T00:00:00+00:00</published>
      <updated>2010-04-16T00:00:00+00:00</updated>
      <id>http://youarewhatyoucode/2010/04/16/nant-and-xml-programming</id>
      <content type="html" xml:base="http://youarewhatyoucode/2010/04/16/nant-and-xml-programming/">&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I have used NAnt (the .Net port of the Java build tool Ant) in most of the .Net/VB6 projects I have worked on. The decision for using this tool was not always mine, but I guess I did not find (nor look for) a better alternative.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As these projects grew, so did their build process and the complexity the build scripts. NAnt was flexible enough to cope with this. If a suitable task does not exist, you can download NAntContrib tasks, other tasks from the web, or you can create yours. If a task is too simple a language construct for the job, you can call an executable and pass the right parameter, create a .Net in-line function, or call a Powershell script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the systems I worked on was particularly complex but very well designed. So was its build script. Common functionality was not duplicated, but kept as targets or tasks in separate NAnt files, that where included in the main NAnt script.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;When reusing these blocks of code, you usually have to pass context-specific parameters to it. You do this by setting properties before invoking the NAnt target. For example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;...
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;SpreadsheetPath&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;value=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;${Config} + ${CurrentProject}&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;call&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;target=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;ProcessSpreadsheet&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This syntax becomes more awkward when more properties need to be passed to the target.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Worse, the lack of explicit input and outputs to a NAnt target make this syntax a bad practice: code calling a target needs to know the name of the properties the target needs set, and the name of the property containing the expected output of the target. Let me picture this with an example:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;pygments highlight&quot;&gt;&lt;code data-lang=&quot;xml&quot;&gt;(Known inputs: SpreadsheetPath and BusinessArea)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;SpreadsheetPath&amp;quot;&lt;/span&gt;
    &lt;span style=&quot;color: #7D9029&quot;&gt;value=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;${Config} + ${CurrentProject}&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;BusinessArea&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;value=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;#39;Security&amp;#39;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;call&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;target=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;GenerateCodeFromSpreadsheet&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;

(Known output: NumberOfGeneratedFiles)
&lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;name=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;TotalCodeFiles&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #7D9029&quot;&gt;value=&lt;/span&gt;&lt;span style=&quot;color: #BA2121&quot;&gt;&amp;quot;${NumberOfGeneratedFiles}&amp;quot;&lt;/span&gt; &lt;span style=&quot;color: #008000; font-weight: bold&quot;&gt;/&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_problem_when_xml_is_not_enough&quot;&gt;The problem: When XML is not enough&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don’t have the intention (nor the knowledge!) to enter the XML vs DSL discussion but I see a real disadvantage in using Ant/NAnt for big and complex systems. Generally speaking is not a good idea to program in an XML based DSL (like NAnt). It makes sense to declare targets that know what to do and how to do it, but as the code base grows and scripts are modularised for better reusability, then is only a matter of time until you find yourself programming on XML.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The XML/DSL discussion is a very interesting one, and so is the classification of programming paradigms ( what is NAnt programming. Goal-Oriented? Declarative? Or simply a markup language?), but I’m not interested on them now. I think I’m done with Ant/NAnt…I’ll stop trying to extract oil from stones, as Spaniards say. There’s only so much you can ask xml-based languages, but soon you’ll need a proper programming language, or you’ll become an xmlholic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you know Maven for Java solutions (NMaven is only an idea at the time of writing), you know this is an XML based tool too so it will suffer the same problems I just mentioned. Maven is, however, more flexible thanks to the life cycle structure and the ability of recursively build projects (as specified in their Project Object Model xml files) in a folder structure. This benefit is not enough to marry xml programming for life&amp;#8230;&amp;#8203;one size doesn’t fit all, in fact in terms of build process; standardisation is the exception rather than the rule. I still need to look into Gradle, but it may be good answer to Ant/Maven approaches.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;the_solution&quot;&gt;The solution:&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I don’t know really. Sorry if you’ve read this far, but I just wanted to brain dump my discontent with XML programming. Maybe is a useful question for us developers using or building frameworks on a daily basis. Where should we allow for a more multi-purpose, less templated approach? Extensibility is not always the answer. Some frameworks like NAnt are very extensible, but offer very little at their core. The extended functionality is more useful than the basic framework itself.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So no, I don’t know the solution for avoiding XML programming (NAnt or Maven) for the time being I’m moving towards a build script fully written in PowerShell, with a flavour of Maven’s life cycles. I will write in detail about this later, it is not rocket science and is not a full solution, but is a start, just like this blog entry.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;</content>

      
      
      
      
      

      
        <author>
            <name>sebastian slutzky</name>
          
          
        </author>
      

      
        <category term="architecture" />
      
        <category term="ranting" />
      

      

      
        <summary type="html">I have used NAnt (the .Net port of the Java build tool Ant) in most of the .Net/VB6 projects I have worked on. The decision for using this tool was not always mine, but I guess I did not find (nor look for) a better alternative. As these projects grew, so did their build process and the complexity the build scripts. NAnt was flexible enough to cope with this. If a suitable task does not exist, you can download NAntContrib tasks, other tasks from the web, or you can create yours. If a task is too simple a language construct for the job, you can call an executable and pass the right parameter, create a .Net in-line function, or call a Powershell script. One of the systems I worked on was particularly complex but very well designed. So was its build script. Common functionality was not duplicated, but kept as targets or tasks in separate NAnt files, that where included in the main NAnt script. When reusing these blocks of code, you usually have to pass context-specific parameters to it. You do this by setting properties before invoking the NAnt target. For example: ... &amp;lt;property name=&amp;quot;SpreadsheetPath&amp;quot; value=&amp;quot;${Config} + ${CurrentProject}&amp;quot; /&amp;gt; &amp;lt;call target=&amp;quot;ProcessSpreadsheet&amp;quot; /&amp;gt; ... This syntax becomes more awkward when more properties need to be passed to the target. Worse, the lack of explicit input and outputs to a NAnt target make this syntax a bad practice: code calling a target needs to know the name of the properties the target needs set, and the name of the property containing the expected output of the target. Let me picture this with an example: (Known inputs: SpreadsheetPath and BusinessArea) &amp;lt;property name=&amp;quot;SpreadsheetPath&amp;quot; value=&amp;quot;${Config} + ${CurrentProject}&amp;quot; /&amp;gt; &amp;lt;property name=&amp;quot;BusinessArea&amp;quot; value=&amp;#39;Security&amp;#39; /&amp;gt; &amp;lt;call target=&amp;quot;GenerateCodeFromSpreadsheet&amp;quot; /&amp;gt; (Known output: NumberOfGeneratedFiles) &amp;lt;property name=&amp;quot;TotalCodeFiles&amp;quot; value=&amp;quot;${NumberOfGeneratedFiles}&amp;quot; /&amp;gt; The problem: When XML is not enough I don’t have the intention (nor the knowledge!) to enter the XML vs DSL discussion but I see a real disadvantage in using Ant/NAnt for big and complex systems. Generally speaking is not a good idea to program in an XML based DSL (like NAnt). It makes sense to declare targets that know what to do and how to do it, but as the code base grows and scripts are modularised for better reusability, then is only a matter of time until you find yourself programming on XML. The XML/DSL discussion is a very interesting one, and so is the classification of programming paradigms ( what is NAnt programming. Goal-Oriented? Declarative? Or simply a markup language?), but I’m not interested on them now. I think I’m done with Ant/NAnt…I’ll stop trying to extract oil from stones, as Spaniards say. There’s only so much you can ask xml-based languages, but soon you’ll need a proper programming language, or you’ll become an xmlholic. If you know Maven for Java solutions (NMaven is only an idea at the time of writing), you know this is an XML based tool too so it will suffer the same problems I just mentioned. Maven is, however, more flexible thanks to the life cycle structure and the ability of recursively build projects (as specified in their Project Object Model xml files) in a folder structure. This benefit is not enough to marry xml programming for life&amp;#8230;&amp;#8203;one size doesn’t fit all, in fact in terms of build process; standardisation is the exception rather than the rule. I still need to look into Gradle, but it may be good answer to Ant/Maven approaches. The solution: I don’t know really. Sorry if you’ve read this far, but I just wanted to brain dump my discontent with XML programming. Maybe is a useful question for us developers using or building frameworks on a daily basis. Where should we allow for a more multi-purpose, less templated approach? Extensibility is not always the answer. Some frameworks like NAnt are very extensible, but offer very little at their core. The extended functionality is more useful than the basic framework itself. So no, I don’t know the solution for avoiding XML programming (NAnt or Maven) for the time being I’m moving towards a build script fully written in PowerShell, with a flavour of Maven’s life cycles. I will write in detail about this later, it is not rocket science and is not a full solution, but is a start, just like this blog entry.</summary>
      

      
      
    </entry>
  
  
</feed>
